# obj - calcul des kernel 50 par individu
    #   - extraire lat/long du centroide du K50
    #   - extraire min & max des dates des points dans le K50
    #   - moyenne + sd des SST sous le K50 dans la periode de temps minDate maxDate
    #   - completer le tableau de synthese avec dosage isotopes avec les informations précédentes
    
rm(list = ls())
# package
library(sf)
library(mapview)
library(maps)
source("C:/Users/ccjuhasz/Desktop/SMAC/GITHUB/SMAC-ENTROPIE_tracking/PTEBAR-JUV/packages_list.r")

#### Loading data ####
# ------------------ #

pnb_trip <- read.table("C:/Users/ccjuhasz/Desktop/SMAC/Projet_publi/6-PNB_isotopes/DATA/PNB_ISOTOPES_TsTrajets_filtre_Audrey_data.txt",
                       h = TRUE,
                       sep = "\t")
head(pnb_trip$DATE)

# ---- Date class
pnb_trip$DATE <- as.POSIXct(pnb_trip$DATE,
                         format = "%Y-%m-%d %H:%M") # Date format


#### Data filtre - migration uniquement ####
# ---------------------------------------- #
# Localisation colonie
lon_col = 55.5
lat_col = -21.25

plot(pnb_trip$LON[pnb_trip$TYPE == "REPRO"],
     pnb_trip$LAT[pnb_trip$TYPE == "REPRO"],
     pch = 16,
     col = "#000000a7",
     xlim = c(min(pnb_trip$LON), max(pnb_trip$LON)),
     ylim = c(min(pnb_trip$LAT), max(pnb_trip$LAT)))
points(pnb_trip$LON[pnb_trip$TYPE == "MIG"],
     pnb_trip$LAT[pnb_trip$TYPE == "MIG"],
     pch = 16,
     col = "#a9a9a976")

map("world",
    add = TRUE,
    col = "#cecaca",
    fill = TRUE)

ll1 <- split(pnb_trip, pnb_trip$ID)

# lapply(ll1, function(x) {
    
#     # Localisation visualisation mig vs repro
#     png(paste("C:/Users/ccjuhasz/Desktop/SMAC/Projet_publi/6-PNB_isotopes/maps/repro_vs_mig/PNB_isotope_zone_activite",
#               unique(x$ID),
#               ".png",
#               sep = ""),
#     res = 300,
#     width = 20,
#     height = 15,
#     pointsize = 12,
#     unit = "cm",
#     bg = "white")
    
#     plot(x$LON[x$TYPE == "REPRO"],
#      x$LAT[x$TYPE == "REPRO"],
#      main = unique(x$ID),
#      xlab = "Longitude",
#      ylab = "Latitude",
#      pch = 16,
#      col = "#000000a7",
#      bty = "n",
#      xlim = c(min(x$LON), max(x$LON)),
#      ylim = c(min(x$LAT), max(x$LAT)))
    
#     points(x$LON[x$TYPE == "MIG"],
#            x$LAT[x$TYPE == "MIG"],
#            pch = 16,
#            col = "#a9a9a976")
    
#     points(x = 55.5,
#            y = -21.25,
#            pch = 15,
#            col = "darkorange")

#     legend("topleft",
#            legend = c("repro", "mig"),
#            fill = c("black", "darkgrey"),
#            bty = "n",
#            horiz = FALSE)
#     dev.off()
    
#     # Min & max dates for each periods
    
#     min_repro <- min(x$DATE[x$TYPE == "REPRO"])
#     max_repro <- max(x$DATE[x$TYPE == "REPRO"])
    
#     min_mig <- min(x$DATE[x$TYPE == "MIG"])
#     max_mig <- max(x$DATE[x$TYPE == "MIG"])
    
#     print(paste("Periode migration : ", min_mig, "-", max_mig))
#     print(paste("Periode reproduction : ", min_repro, "-", max_repro))
    
# })

pnb_mig <- pnb_trip[pnb_trip$TYPE == "MIG", ]
dim(pnb_mig) # from 6481 rows to 3620
table(pnb_mig$TYPE)

#### Data filtre - oiseau avec dosage isotope uniquement ####
# --------------------------------------------------------- #
pnb_mig <- pnb_mig[pnb_mig$ID != "PNB-C2143",]
table(pnb_mig$ID)
length(unique(pnb_mig$ID))

#### Sf/sp class ####
# ----------------- #
# Conversion in sf Spatial Object
projLatLon <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
# UTM 43S corresponding to the center of the Indian ocean
# UTM 43 => 32743
projUTM <- '+init=epsg:32743'

# Non projected spatial object
pnb_sf <- st_as_sf(pnb_mig,
                   coords = c("LON", "LAT"),
                   crs = projLatLon)

pnb_sp <- as(pnb_sf, "Spatial")

# Projected spatial object
pnb_sf_utm <- st_transform(pnb_sf,
                           crs = 32743)
pnb_sp_utm <- as(pnb_sf_utm,
                 "Spatial")

#### Data visualisation ####
# ------------------------ #

# ---- Factor class
pnb_sp_utm$ID <- as.factor(pnb_sp_utm$ID)
mapview(pnb_sp_utm,
        zcol = "ID")

# ---- Creation d'un deuxieme ID pour voir tous les points d'un meme individu
# head(pnb_sp_utm)
# pnb_sp_utm$ID2 <- substr(pnb_sp_utm$ID,
#                          5,
#                          9)

# pnb_list <- split(pnb_sp_utm,
#                   pnb_sp_utm$ID2)
# mapview(pnb_list)

# ---- Creation d'une liste par ID
pnb_list2 <- split(pnb_sp_utm,
                  pnb_sp_utm$ID)
mapview(pnb_list2)

#### kernel 50 ####
# --------------- #

# ATTENTION - Calcul des kernels à partir des données en UTM #
summary(pnb_list2)
length(pnb_list2)

ker50_list <- lapply(pnb_list2,
                     function(x) {
                         KUD <- kernelUD(x,
                                        #  h = 2,
                                        h = "href",
                                         grid = 500
                                         )
                         KUDvol <- getvolumeUD(KUD)
                         ver50 <- getverticeshr(KUDvol, 50)
                         ver50
                     })
length(ker50_list)
mapview(ker50_list)

ker90_list <- lapply(pnb_list2,
                     function(x) {
                         KUD <- kernelUD(x,
                                        #  h = 2,
                                        h = "href",
                                         grid = 500
                                         )
                         KUDvol <- getvolumeUD(KUD)
                         ver90 <- getverticeshr(KUDvol, 90)
                         ver90
                     })
length(ker90_list)
mapview(ker90_list)

#### map production ####

# Cadrage de la donnees - defini la fenetre de l'ocean indien ou les petrels peuvent potentiellement s'alimenter
lon_min = 10
lon_max = 130 
lat_min = -40
lat_max = 30

# ----- #

kl <- 
lapply(pnb_list2, function (x) {
    
    print(unique(x$ID))
    
    
    KUD <- kernelUD(x,
                #    h = 2,
                h = "href",
                grid = 500)
    KUDvol <- getvolumeUD(KUD)
    ver50 <- getverticeshr(KUDvol, 50) # calcul en UTM
    ver50sf <- st_as_sf(ver50) 
    ver50spLL <- st_transform(ver50sf, crs = 4326) # retour en lat lon pour les cartes
    
    ver90 <- getverticeshr(KUDvol, 90)
    ver90sf <- st_as_sf(ver90) 
    ver90spLL <- st_transform(ver90sf, crs = 4326)
    
    kernel_list <- list(ver50spLL, ver90spLL)
    kernel_list
})

for(i in 1:length(kl)){
    names(kl[[i]])[1] <- names(kl[i])
    names(kl[[i]])[2] <- names(kl[i])    
   }
# for the GithubPage
# saveRDS(kl,
#         "C:/Users/ccjuhasz/Desktop/SMAC/Projet_publi/6-PNB_isotopes/DATA/GitHub_Pages/kernel50-90.rds")

lapply(kl, function(x) {
    id <- names(x)[1]
    print(id)
        
    # png(paste("C:/Users/ccjuhasz/Desktop/SMAC/Projet_publi/6-PNB_isotopes/maps/kernels/PNB_isotope_ker_50_90_",
    #           id,
    #           ".png",
    #           sep = ""),
    # res = 300,
    # width = 70,
    # height = 50,
    # pointsize = 12,
    # unit = "cm",
    # bg = "transparent")
    # x11()    
    plot(lon_col,
         lat_col,
         pch = 16,
         col = "darkred",
         cex.lab = 2,
         font.lab = 2,
         main = id,
         xlab = "Longitude",
         ylab = "Latitude",
         cex.axis = 1.5,
         xlim = c(lon_min, lon_max),
         ylim = c(lat_min, lat_max))
  
  plot(x[[2]],
       add = TRUE,
       lwd = 1.5,
       border = "#bfd1ff",
       col = "#bfd1ff")
  
  plot(x[[1]],
       add = TRUE,
       lwd = 1.5,
       border = "#004FFF",
       col = "#004FFF")
  plot(pnb_sf[pnb_sf$ID == id,],
       add = TRUE,
       col = "darkgrey",
       pch = 3,
       cex = 2,
       lwd = 2)
  
  map('world',
      add = T,
      fill = T,
      col = gray(0.86),
      border = gray(0.5))
  
  
  dev.off()
})

#### Centroides des kernels 50 ####

kern <- readRDS("C:/Users/ccjuhasz/Desktop/SMAC/Projet_publi/6-PNB_isotopes/DATA/GitHub_Pages/kernel50-90.rds")
kern

ker50 <- lapply(kern, function(x) {x[[1]]})
length(ker50)
mapview::mapview(ker50)

# ----- test for kernel with 2 areas, such as ker50[[9]] ker50[[22]]
test <- ker50[[22]]
plot(sf::st_geometry(test))
plot(sf::st_centroid(test), add = T)

test1 <- ker50[[9]]
plot(sf::st_geometry(test1))
plot(sf::st_centroid(test1), add = T)

# ----- Calcul automatique des centroides de kernel

centro <- lapply(ker50,
                 function(x) {
                     
                     if(sf::st_is_valid(x) == FALSE) { # certains polygones non valides
                         x <- sf::st_make_valid(x)
                     }
                     sf::st_centroid(x)
                 })
# ----- verification visuelle

# for (i in 1:length(ker50)) {
#     x11()
#     plot(sf::st_geometry(ker50[[i]]))
#     plot(centro[[i]],
#          add = T,
#          col = "red")
# }

# ----- extraction & completion des metadonnees
coord_centro <- lapply(centro,
                       function(x) {
                           sf::st_coordinates(x)
                       })

coord <- data.frame(ID = names(centro), do.call("rbind", coord_centro), row.names = NULL)
names(coord) <- c("ID", "CENTRO_LON", "CENTRO_LAT")

# verification visuelle
# for (i in 1:length(ker50)) {
#     x11()
#     plot(sf::st_geometry(ker50[[i]]))
#     points(coord$CENTRO_LON[i],
#          coord$CENTRO_LAT[i],
#          col = "red")
# }

# Creation du nouveau fichier
# metadat <- read.table("C:/Users/ccjuhasz/Desktop/SMAC/Projet_publi/6-PNB_isotopes/DATA/PNB_SI_HG_GLS.txt",
#                       sep = "\t",
#                       dec = ",",
#                       h = TRUE)
# metadat
# all(metadat$ID %in% coord$ID)
# all(coord$ID %in% metadat$ID)

# metadat2 <- left_join(metadat,
#                       coord,
#                       by = "ID")

# write.table(metadat2,
#             "C:/Users/ccjuhasz/Desktop/SMAC/Projet_publi/6-PNB_isotopes/DATA/PNB_SI_HG_GLS_centroide.txt",
#             sep = "\t")


iso <- read.table("C:/Users/ccjuhasz/Desktop/SMAC/Projet_publi/6-PNB_isotopes/DATA/PNB_SI_HG_GLS_centroide.txt",
                      sep = "\t",
                      dec = ",",
                      h = TRUE)
iso

plot(iso$CENTRO_LAT,
     iso$HG_MEAN)
plot(iso$CENTRO_LON,
     iso$HG_MEAN)

plot(iso$CENTRO_LAT,
     iso$d13C_MEAN)
plot(iso$CENTRO_LON,
     iso$d13C_MEAN)

plot(iso$CENTRO_LAT,
     iso$d15N_MEAN)
plot(iso$CENTRO_LON,
     iso$d15N_MEAN)

# ---------- #
plot(iso$CENTRO_LON,
     iso$CENTRO_LAT,
     pch = 16,
     cex = scales::rescale(as.numeric(iso$d13C_MEAN), to = c(1,5)))

plot(iso$CENTRO_LON,
     iso$CENTRO_LAT,
     pch = 16,
     cex = scales::rescale(as.numeric(iso$d15N_MEAN), to = c(1, 5)))

plot(iso$CENTRO_LON,
     iso$CENTRO_LAT,
     pch = 16,
     cex = scales::rescale(as.numeric(iso$HG_MEAN), to = c(1, 5)))
